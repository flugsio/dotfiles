#!/usr/bin/env python
# -*- coding: utf-8 -*-

import sys
import json
from subprocess import Popen, PIPE

def shell_read(command):
    return Popen(command, stdout=PIPE, shell=True, universal_newlines=True).stdout.read().strip()

def get_glucose():
    return shell_read("gluj")

def get_journal_entries_count():
    return "~" + shell_read("journalctl --since='1 hour ago' | wc -l")

def get_glucose_status():
    # checks for presence of measurement last 2.5 hours
    # 11 bytes = 10*15 min + newline
    return Popen("gluj | tail --bytes 11 | sed 's/[^0-9A-Z]//g' | grep -q '.'", shell=True, universal_newlines=True).wait()

def get_pomodoro_name():
    return shell_read("p name")

def get_pomodoro_graph():
    return shell_read("p graph")

def get_hexa_clock():
    return shell_read("hexa_clock")

def get_cpu_temperature():
    return shell_read("sensors | grep temp2 | cut -d \"+\" -f 2 | cut -d \".\" -f 1")

def glucose_color():
    if get_glucose_status() == 0:
        return ''
    else:
        return '#dc322f'

def print_line(message):
    """ Non-buffered printing to stdout. """
    sys.stdout.write(message + '\n')
    sys.stdout.flush()

def read_line():
    """ Interrupted respecting reader for stdin. """
    # try reading a line, removing any extra whitespace
    try:
        line = sys.stdin.readline().strip()
        # i3status sends EOF, or an empty line
        if not line:
            sys.exit(3)
        return line
    # exit on ctrl-c
    except KeyboardInterrupt:
        sys.exit()

if __name__ == '__main__':
    # Skip the first line which contains the version header.
    print_line(read_line())

    # The second line contains the start of the infinite array.
    print_line(read_line())

    while True:
        line, prefix = read_line(), ''
        # ignore comma at start of lines
        if line.startswith(','):
            line, prefix = line[1:], ','

        j = json.loads(line)
        j.insert(0, {'full_text' : '%s' % get_journal_entries_count(), 'name' : 'journal_entries'})
        j.insert(0, {'full_text' : '%s' % get_hexa_clock(), 'name' : 'hexa_clock'})
        j.insert(0, {'full_text' : '%s' % get_glucose(), 'name' : 'glucose', 'color' : glucose_color()})
        j.insert(0, {'full_text' : '%s' % get_pomodoro_graph(), 'name' : 'pomodoro_graph'})
        j.insert(0, {'full_text' : '%s' % get_pomodoro_name(), 'name' : 'pomodoro_name'})
        #cpu_temp = int(get_cpu_temperature())
        #if cpu_temp < 53:
        #  cpu_temp_color = "#9f9f9f"
        #else:
        #  cpu_temp_color = "#dc322f"
        #j.insert(len(j)-1, {'full_text' : '%sÂ°C' % cpu_temp, 'name' : 'cpu_temperature', 'color' : cpu_temp_color})

        # and echo back new encoded json
        print_line(prefix+json.dumps(j))
