#!/bin/bash
TERM="st -e"
COMMAND="st -e zsh -i -c"
HTERM="st -e zsh -i -c"
HCOMMAND="st -e sh -c"
CACHE=${XDG_CACHE_HOME:-$HOME/.cache}/dmenu-recent-apps
mkdir -p ${XDG_CACHE_HOME:-$HOME/.cache}
CONFIG=${XDG_CONFIG_HOME:-$HOME/.config}/dmenu
mkdir -p $CONFIG
touch $CONFIG/apps-term
touch $CONFIG/apps-command
touch $CONFIG/apps-bg
touch $CONFIG/apps-hterm # hold
touch $CONFIG/apps-hcommand # hold

MOST_USED=`sort $CACHE 2>/dev/null | uniq -c | sort -rn | colrm 1 8`
# put MOST_USER at top, then add all dmenu_path without the MOST_USED ones
RUN=`(echo "$MOST_USED"; dmenu_path | grep -vxF "$MOST_USED") | dmenu -p Execute: "$@"` || exit
# add current to cache, last 1000, and always save commands with arguments,
(echo $RUN; head -n 1000 $CACHE 2>/dev/null; grep ' ' $CACHE | uniq 2>/dev/null) > $CACHE.$$
mv $CACHE.$$ $CACHE

# figure out how to run the command based on the first word.  Note that this does not support
# a bg/term decision based on further arguments (although you could easily add that)
word0=${RUN%% *}
match="^$word0$"
while ! grep -q $match $CONFIG/apps-{term,command,bg,hterm,hcommand}
do
    type=$(echo -e "term\ncommand\nbg\nhterm\nhcommand" | dmenu -p type)
    [[ -z $type ]] && exit
    [ $type = term -o $type = command  -o $type = bg  -o $type = hterm  -o $type = hcommand ] || continue
    echo $word0 >> $CONFIG/apps-$type
done
grep -q $match $CONFIG/apps-term && exec $TERM "$RUN"
grep -q $match $CONFIG/apps-command && exec $COMMAND "$RUN"
grep -q $match $CONFIG/apps-bg && eval "$RUN"
grep -q $match $CONFIG/apps-hterm && exec $HTERM "$RUN"
grep -q $match $CONFIG/apps-hcommand && exec $HCOMMAND "$RUN"
