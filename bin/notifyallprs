#!/bin/zsh -il

set -e

prs=""
prs_failed=""
prs_merged=""

content=""
content_merged=""

#notify="@here "
notify=" "
recipient="$SLACK_DEVSTATUS"
recipient="$SLACK_MAIN_FLOW"

function main {
  local cmd=$1
  if [ "$cmd" = "daily_merge_status" ]; then
    daily_merge_status
  elif [ "$cmd" = "loop_update" ]; then
    loop_update
  elif [ "$cmd" = "update" ]; then
    update_or_replace
  else
    echo "not a valid command"
  fi
}

function daily_merge_status {
  refresh_prs_merged "$(TZ=UTC+24 date +'%Y-%m-%dT%H:%M')" "_daily"
  notify_slack_daily_merged
}
function loop_update {
  update_or_replace
  while sleep 10m; do
    update_or_replace
  done
}

# this will reuse the old message or replace if too old
function update_or_replace {
  refresh_data
  if [ "$(minutes_since_post)" -gt 180 ]; then
    delete_old_message
    notify_slack_first
  else
    notify_slack_update
  fi
}

function refresh_data {
  refresh_prs
  local standup_time="$(TZ=UTC date +'%Y-%m-%dT12:40')"
  if [ "$(date +%s --date $standup_time)" -gt "$(date +%s)" ]; then
    # rewind 24 hours if the time is in the future
    standup_time="$(TZ=UTC+24 date +'%Y-%m-%dT12:40')"
  fi

  refresh_prs_merged "$standup_time"
}

function refresh_prs {
  #-F q="is:open" \
  #-F sort=created \
  #-F per_page=100 \
  response="$HOME/.cache/notifypr_response"
  curl -sSL -H "Authorization: token $GITHUB_TOKEN" \
    -H "Accept: application/vnd.github.v3+json" \
    -o $response \
    "https://api.github.com/search/issues?q=is:open+is:pr+user:promoteinternational+draft:false+-status:failure"

  curl -sSL -H "Authorization: token $GITHUB_TOKEN" \
    -H "Accept: application/vnd.github.v3+json" \
    -o ${response}_failed \
    "https://api.github.com/search/issues?q=is:open+is:pr+user:promoteinternational+draft:false+status:failure+updated:>=$(TZ=UTC+24 date +'%Y-%m-%dT%H:%M')"

  prs=$(cat $response | jq -r ".items[] | [(.title | gsub(\",\"; \"،\")), .html_url, .user.login, .created_at, .updated_at, .closed_at, .comments] | @csv")
  prs_failed=$(cat ${response}_failed | jq -r ".items[] | [(.title | gsub(\",\"; \"،\")), .html_url, .user.login, .created_at, .updated_at, .closed_at] | @csv")

  content="<https://github.com/pulls?q=is%3Aopen+is%3Apr+user%3Apromoteinternational+draft%3Afalse+-status%3Afailure|current open pr's> $notify"
  content+="(<https://github.com/pulls?q=is%3Aopen+is%3Apr+user%3Apromoteinternational+draft%3Atrue|current drafts>)"
  if [ "$(echo $prs | wc -c)" -gt 1 ]; then
    while read pr; do
      echo "::${pr}::"
      title=$(echo $pr | cut -d',' -f1 | sed 's/"//g')
      url=$(echo $pr | cut -d',' -f2 | sed 's/"//g')
      user=$(echo $pr | cut -d',' -f3 | sed 's/"//g' | sed 's/dependabot.*/bot/')
      created_at=$(echo $pr | cut -d',' -f4 | sed 's/"//g')
      updated_at=$(echo $pr | cut -d',' -f5 | sed 's/"//g')
      closed_at=$(echo $pr | cut -d',' -f6 | sed 's/"//g')
      comments=$(echo $pr | cut -d',' -f7)
      repo_short=$(echo $url | cut -d'/' -f 5 | sed 's/promote-//' | cut -d'-' -f 1)
    
      created_ago=$(echo $((($(date +"%s")-$(date +"%s" -d "$created_at"))/60/60)))
      updated_ago=$(echo $((($(date +"%s")-$(date +"%s" -d "$updated_at"))/60)))
      if [ "$updated_ago" -gt 120 ]; then
        updated_ago=$(echo $(($updated_ago/60))h)
      else
        updated_ago=$(echo ${updated_ago}m)
      fi
      closed_ago=$(echo $((($(date +"%s")-$(date +"%s" -d "$closed_at"))/60)))
      # limit to git recommended length, slack api is limited to 4000 characters (including the markdown syntax/urls)
      title=${title:0:50}
      title=$(echo $title | sed -E 's{(.*\] |)(.*){\1<'$url'|\2>{')
      title=$(echo $title | sed -E 's{\[#([[:digit:]]+)\]{<https://pivotaltracker.com/story/show/\1/|#\1>{')
    
      content="$content%0A:op:$repo_short $title ${created_ago}h by $user"
      if [ "${created_ago}h" != "$updated_ago" ]; then
        content="$content, updated ${updated_ago}"
      fi
      # this does not work with reviews
      if [ "$comments" -gt 1 ] || [ "$repo_short" != "promote" -a "$comments" -gt 0 ]; then
        content="$content:memo:${comments}"
      fi
    done <<< $prs
  fi
  
  if [ "$(echo $prs_failed | wc -c)" -gt 1 ]; then
    content="$content%0A%0Arecently failing pr's"
    while read pr; do
      title=$(echo $pr | cut -d',' -f1 | sed 's/"//g')
      url=$(echo $pr | cut -d',' -f2 | sed 's/"//g')
      user=$(echo $pr | cut -d',' -f3 | sed 's/"//g' | sed 's/dependabot.*/bot/')
      created_at=$(echo $pr | cut -d',' -f4 | sed 's/"//g')
      updated_at=$(echo $pr | cut -d',' -f5 | sed 's/"//g')
      closed_at=$(echo $pr | cut -d',' -f6 | sed 's/"//g')
      repo_short=$(echo $url | cut -d'/' -f 5 | sed 's/promote-//' | cut -d'-' -f 1)
    
      created_ago=$(echo $((($(date +"%s")-$(date +"%s" -d "$created_at"))/60/60)))
      updated_ago=$(echo $((($(date +"%s")-$(date +"%s" -d "$updated_at"))/60)))
      #closed_ago=$(echo $((($(date +"%s")-$(date +"%s" -d "$closed_at"))/60)))
      title=${title:0:50}
      title=$(echo $title | sed -E 's{(.*\] |)(.*){\1<'$url'|\2>{')
      title=$(echo $title | sed -E 's{\[#([[:digit:]]+)\]{<https://pivotaltracker.com/story/show/\1/|#\1>{')
    
      content="$content%0A:octagonal_sign:$repo_short $title ${created_ago}h by $user"
      if [ "$created_ago" != "$updated_ago" ]; then
        content="$content, updated ${updated_ago}m"
      fi
    done <<< $prs_failed
  fi
  
  #echo "$content" | sed 's/%0A/\n/g'
  #echo "$content" | sed 's/%0A/\n/g' | wc
}

function refresh_prs_merged {
  local date="$1"
  local postfix="$2"
  response="$HOME/.cache/notifypr_response"
  response_merged="$HOME/.cache/notifypr_response$postfix"
  curl -sSL -H "Authorization: token $GITHUB_TOKEN" \
    -H "Accept: application/vnd.github.v3+json" \
    -o ${response_merged} \
    "https://api.github.com/search/issues?q=is:merged+is:pr+user:promoteinternational+draft:false+merged:>=$date+-author%3Aapp%2Fdependabot&sort=updated&order=asc"

  curl -sSL -H "Authorization: token $GITHUB_TOKEN" \
    -H "Accept: application/vnd.github.v3+json" \
    -o ${response}_depend \
    "https://api.github.com/search/issues?q=is:merged+is:pr+user:promoteinternational+draft:false+merged:>=$date+author%3Aapp%2Fdependabot&sort=updated&order=asc"

  prs_merged=$(cat ${response_merged} | jq -r ".items[] | [(.title | gsub(\",\"; \"،\")), .html_url, .user.login, .created_at, .updated_at, .closed_at] | @csv")
  prs_depend=$(cat ${response}_depend | jq -r ".items | sort_by(.html_url)[] | [(.title | gsub(\",\"; \"،\")), .html_url, .user.login, .created_at, .updated_at, .closed_at] | @csv")

  content_merged="recently merged pr's"
  if [ "$(echo $prs_merged | wc -c)" -gt 1 ]; then
    while read pr; do
      title=$(echo $pr | cut -d',' -f1 | sed 's/"//g')
      url=$(echo $pr | cut -d',' -f2 | sed 's/"//g')
      user=$(echo $pr | cut -d',' -f3 | sed 's/"//g' | sed 's/dependabot.*/bot/')
      created_at=$(echo $pr | cut -d',' -f4 | sed 's/"//g')
      updated_at=$(echo $pr | cut -d',' -f5 | sed 's/"//g')
      closed_at=$(echo $pr | cut -d',' -f6 | sed 's/"//g')
      repo_short=$(echo $url | cut -d'/' -f 5 | sed 's/promote-//' | cut -d'-' -f 1)
    
      created_ago=$(echo $((($(date +"%s")-$(date +"%s" -d "$created_at"))/60/60)))
      #updated_ago=$(echo $((($(date +"%s")-$(date +"%s" -d "$updated_at"))/60)))
      closed_ago=$(echo $((($(date +"%s")-$(date +"%s" -d "$closed_at"))/60/60)))
      title=${title:0:50}
      title=$(echo $title | sed -E 's{(.*\] |)(.*){\1<'$url'|\2>{')
      title=$(echo $title | sed -E 's{\[#([[:digit:]]+)\]{<https://pivotaltracker.com/story/show/\1/|#\1>{')
    
      # TODO: who merged it, it's not included in the current api request
      content_merged="$content_merged%0A:me:$repo_short $title ${created_ago}h by $user, merged ${closed_ago}h"
      #content_merged="$content_merged%0A:merge: $title"
    done <<< $prs_merged
  else
    content_merged="$content_merged%0A"
  fi
  if [ "$(echo $prs_depend | wc -c)" -gt 1 ]; then
    content_merged="$content_merged%0A:me:Dependencies:"
    local prev_repo=""
    while read pr; do
      title=$(echo $pr | cut -d',' -f1 | sed 's/"//g' | sed 's/Bump //' | sed 's/ from//' | sed 's/ to /\//')
      url=$(echo $pr | cut -d',' -f2 | sed 's/"//g')
      user=$(echo $pr | cut -d',' -f3 | sed 's/"//g' | sed 's/dependabot.*/bot/')
      created_at=$(echo $pr | cut -d',' -f4 | sed 's/"//g')
      updated_at=$(echo $pr | cut -d',' -f5 | sed 's/"//g')
      closed_at=$(echo $pr | cut -d',' -f6 | sed 's/"//g')
      repo_short=$(echo $url | cut -d'/' -f 5 | sed 's/promote-//' | cut -d'-' -f 1)
    
      created_ago=$(echo $((($(date +"%s")-$(date +"%s" -d "$created_at"))/60/60)))
      #updated_ago=$(echo $((($(date +"%s")-$(date +"%s" -d "$updated_at"))/60)))
      closed_ago=$(echo $((($(date +"%s")-$(date +"%s" -d "$closed_at"))/60/60)))
      title=${title:0:50}
      title=$(echo $title | sed -E 's{(.*\] |)(.*){\1<'$url'|\2>{')
      title=$(echo $title | sed -E 's{\[#([[:digit:]]+)\]{<https://pivotaltracker.com/story/show/\1/|#\1>{')
    
      if [ "$prev_repo" = "$repo_short" ]; then
        content_merged="$content_merged $title,"
      else
        prev_repo=$repo_short
        content_merged="$content_merged $repo_short $title,"
      fi
    done <<< $prs_depend
    content_merged=${content_merged%?}
  fi
  #echo "$content_merged" | sed 's/%0A/\n/g'
  #echo "$content_merged" | sed 's/%0A/\n/g' | wc
}

function minutes_since_post {
  local now=$(date -u +%s)
  local posted_at=$(cat "$HOME/.cache/notifypr_content_merged" | jq -r .ts | cut -d. -f1)
  echo "($now - $posted_at) / 60" | bc
}

function delete_old_message {
  content_merged_ts=$(cat "$HOME/.cache/notifypr_content_merged" | jq -r .ts)
  content_ts=$(cat "$HOME/.cache/notifypr_content" | jq -r .ts)
  delete_slack "$content_merged_ts"
  delete_slack "$content_ts"
}

function notify_slack_daily_merged {
  create_slack "$content_merged" "$HOME/.cache/notifypr_content_daily"
}

function notify_slack_first {
  create_slack "$content_merged" "$HOME/.cache/notifypr_content_merged"
  create_slack "$content" "$HOME/.cache/notifypr_content"
}

function notify_slack_update {
  content_merged_ts=$(cat "$HOME/.cache/notifypr_content_merged" | jq -r .ts)
  content_ts=$(cat "$HOME/.cache/notifypr_content" | jq -r .ts)
  update_slack "$content_merged" "$content_merged_ts"
  update_slack "$content" "$content_ts"
}

function create_slack {
  local text="$1"
  local output="$2"
  curl -d "token=${SLACK_PROMOTEINT_TOKEN}" -d "channel=$recipient" -d "as_user=true" -d "link_names=true" --data-binary "text=${text}" https://slack.com/api/chat.postMessage -o "$output"
  sleep 0.2
}

function update_slack {
  local text="$1"
  local ts="$2"
  curl -d "token=${SLACK_PROMOTEINT_TOKEN}" -d "channel=$recipient" -d "as_user=true" -d "link_names=true" --data-binary "text=${text}" -d ts="$ts" https://slack.com/api/chat.update
  sleep 0.2
}

function delete_slack {
  local ts="$1"
  curl -d "token=${SLACK_PROMOTEINT_TOKEN}" -d "channel=$recipient" -d "as_user=true" -d ts="$ts" https://slack.com/api/chat.delete
  sleep 0.2
}


main $@
